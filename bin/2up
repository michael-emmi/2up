#!/usr/bin/env bash --posix
set -Eeuo pipefail

margin=25
resolution=72
paper=letter

function gsbbox {
  local file="$1"
  gs -sDEVICE=bbox -r$resolution -dNOPAUSE -dBATCH "$file" 2>&1 | grep "%%BoundingBox" | cut -d' ' -f 2-5
}

function filter {
  local file="$1"
  local outfile="$2"
  local selection="$3"
  pdfjam -o "$outfile" "$file" "$selection" > /dev/null 2>&1
}

function crop {
  local file="$1"
  local outfile="$2"
  local bbox="$3"

  if [[ -z "$bbox" ]]
  then
    pdfcrop "$file" --resolution $resolution --margins $margin "$outfile" > /dev/null
  else
    pdfcrop "$file" --resolution $resolution --margins $margin --bbox "$bbox" "$outfile" > /dev/null
  fi
}

function join {
  local outfile="$1"
  local files="${@:2}"
  pdfjoin -o "$outfile" "$files" --rotateoversize false --paper $paper > /dev/null 2>&1
}

function nup {
  local outfile="$1"
  local files="${@:2}"
  pdfnup -o "$outfile" "$files" --paper $paper > /dev/null 2>&1
}

function bbox {
  local file="$1"
  local selection="$2"
  local selected="${file/.pdf/.$selection.pdf}"
  filter "$file" "$selected" "$selection"
  gsbbox "$selected"
}

function quartiles {
  local numbers="$1"
  local n=$(echo "$numbers" | wc -l)
  echo "$numbers" | sort | sed -n "$((n/4))p; $((n/2))p; $((n/4*3))p"
}

function range {
  local numbers="$1"
  local threshold=5
  local q1 q2 q3 diff bound

  read -r q1 q2 q3 <<< $(quartiles "$numbers")
  diff=$((q3-q1))
  diff=$((diff > threshold ? diff : threshold))
  bound=$((diff*3))
  echo "$((q2-bound)) $((q2+bound))"
}

function outliers {
  local numbers="$1"
  local min
  local max
  local indices=""
  local index=1
  read -r min max <<< $(range "$numbers")
  for n in $numbers
  do
    if (( n < min || n > max ))
    then
      indices+="$index\n"
    fi
    ((++index))
  done
  echo -e $indices
}

function boxes {
  local file="$1"
  gsbbox "$file"
}

function outlier_boxes {
  local boxes=$1
  local indices=""

  for col in $(seq 1 4)
  do
    indices+="$(outliers "$(echo "$boxes" | cut -f $col -d ' ')")\n"
  done

  echo $(echo -e "$indices" | sort -g | uniq)
}

function get_selections {
  local bound=$1
  local outliers=$2
  local selections=""
  local flags=" -v"
  local polarity="0"
  local head="1"
  for index in $(seq 1 $bound)
  do
    if grep -q $(cut -f $((polarity+1)) -d ' ' <<< "$flags") "\b$index\b" <<< "$outliers"
    then
      if ((index == 1))
      then
        :
      elif ((head == index-1))
      then
        selections+=" $head "
      else
        selections+=" $head-$((index-1))"
      fi
      polarity=$(((polarity+1) % 2))
      head=$index
    fi
  done
  selections+=" $head-"
  echo $selections | xargs
}

function get_keypage {
  local bound=$1
  local excluded="$2"

  for index in $(seq 1 $bound)
  do
    if grep -q -v "\b$index\b" <<< "$excluded"
    then
      echo $index
      return
    fi
  done

  echo 1
}

function simple_compose {
  local file="$1"
  local outfile="$2"
  local cropped="${file/.pdf/.cropped.pdf}"
  crop "$file" "$cropped"
  nup "$outfile" "$cropped"
}

function complex_compose {
  local in="$1"
  local out="$2"
  local boxes pages outliers keypage box selections splits

  echo "computing bounding boxes" >&2
  boxes=$(boxes "$in")

  pages=$(wc -l <<< "$boxes" | xargs)
  echo "composing $pages pages" >&2

  outliers=$(outlier_boxes "$boxes")
  echo "outliers: $outliers" >&2

  keypage=$(get_keypage $pages "$outliers")
  echo "keypage: $keypage" >&2

  box="$(bbox "$in" $keypage)"
  echo "bounding box: $box" >&2

  ## XXX in case of per-selection handling
  #
  # local selections=$(get_selections $pages "$outliers")

  selections="1-"
  echo "selections: $selections" >&2

  echo "cropping selections" >&2
  for selection in "$selections"
  do
    local split="${in/.pdf/.$selection.pdf}"
    local cropped="${split/.pdf/.cropped.pdf}"
    filter "$in" "$split" "$selection"
    crop "$split" "$cropped" "$box"
    splits+=" $cropped"
  done

  echo "composing cropped selections" >&2
  nup "$out" "$(echo "$splits" | xargs)"
}

function compose {
  local in="$1"
  local out="$2"

  # simple_compose "$in" "$out"
  complex_compose "$in" "$out"
}

function main {
  local in="$1"
  local file="$(basename "$in")"
  local dir=$(mktemp -d)
  local composed="${file/.pdf/.2up.pdf}"

  trap "rm -rf $dir" EXIT
  cp "$in" "$dir"
  pushd $dir > /dev/null
  compose "$file" "$composed"
  popd > /dev/null
  cp "$dir/$composed" "$composed"
}

main "$@"
